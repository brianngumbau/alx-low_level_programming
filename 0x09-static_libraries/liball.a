!<arch>
0-isupper.c/    0           0     0     644     208       `
#include "main.h"
/**
 * _isupper - check for uppercase letters
 * @c: char to check
 *
 * Return: 1 if uppercase otherwise 0
 */
int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (1);
	return (0);
}
0-memset.c/     0           0     0     644     295       `
#include "main.h"
/**
 * _memset - fills a block of value with specific value
 * @s: starting address
 * @b: desired value
 * @n: bytes
 * Return: new value for n bytes
 */
char *_memset(char *s, char b, unsigned int n)
{
	int x = 0;

	for (; n > 0; x++)
	{
		s[x] = b;
		n--;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     330       `
#include "main.h"
/**
 * _strcat - concatenates 2 strings
 * @dest: input value
 * @src: input value
 * Return: void
 */
char *_strcat(char *dest, char *src)
{
	int i;
	int j;

	i = 0;
	while (dest[i] != '\0')
	{
		i++;
	}
	j = 0;
	while (src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}
	dest[i] = '\0';
	return (dest);
}
100-atoi.c/     0           0     0     644     384       `
#include "main.h"
/**
 * _atoi - converts astring into an integer
 * @s: string
 * Return: integer
 */
int _atoi(char *s)
{
	int g = 1, i = 0;
	unsigned int h = 0;

	while (!(s[i] <= '9' && s[i] >= '0') && s[i] != '\0')
	{
		if (s[i] == '-')
			g *= -1;
		i++;
	}
	while (s[i] <= '9' && (s[i] >= '0' && s[i] != '0'))
	{
		h = (h * 10) + (s[i] -'0');
		i++;
	}
	h *= g;
	return (h);
}
1-isdigit.c/    0           0     0     644     176       `
#include "main.h"
/**
 * _isdigit - checks for a digit
 * @c: int to check
 * Return: 1 if c is a digit 0 otherwise
 */
int _isdigit(int c)
{
	return (c >= '0' && c <= '9');
}
1-memcpy.c/     0           0     0     644     300       `
#include "main.h"
/**
 * _memcpy - copies memory area
 * @dest: destination memory
 * @src: initial memory location
 * @n: bytes
 * Return: dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	int k = 0;
	int l = n;

	for (; k < l; k++)
	{
		dest[k] = src[k];
		n--;
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     402       `
#include "main.h"
/**
 * _strncat - concatenates 2 strings
 * using at most n bytes from src
 * @dest: ijnput value
 * @src: inpurt value
 * @n: input value
 * Return: dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int y;
	int z;

	y = 0;
	while (dest[y] != '\0')
	{
		y++;
	}
	z = 0;
	while (z < n && src[z] != '\0')
	{
		dest[y] = src[z];
		y++;
		z++;
	}
	dest[y]= '\0';
	return (dest);
}
2-strchr.c/     0           0     0     644     232       `
#include "main.h"
/**
 * _strchr - entry point
 * @s: input value
 * @c: input value
 * Return: 0
 */
char *_strchr(char *s, char c)
{
	int a = 0;

	for (; s[a] >= '\0'; a++)
	{
		if (s[a] == c)
			return (&s[a]);
	}
	return (0);
}
2-strlen.c/     0           0     0     644     215       `
#include "main.h"
/**
 * _strlen - returns the length of a string
 * @s: string
 * Return: length of string
 */
int _strlen(char *s)
{
	int longl = 0;

	while (*s != '\0')
	{
		longl++;
		s++;
	}
	return (longl);
}

2-strncpy.c/    0           0     0     644     323       `
#include "main.h"
/**
 * _strncpy - copies a string
 * @dest: input value
 * @src: input value
 * @n: input value
 * Return: dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int c = 0;

	while (c <n && src[c] != '\0')
	{
		dest[c] = src[c];
		c++;
	}
	while (c < n)
	{
		dest[c] = '\0';
		c++;
	}
	return (dest);
}

3-islower.c/    0           0     0     644     199       `
#include "main.h"
/**
 * _islower - checks for lowercase characters
 * @c character to check
 * Return: 1 if c is lowercase 0 if otherwise
 */
int _islower(int c)
{
	return (c >= 'a' && c <= 'z');
}

3-puts.c/       0           0     0     644     201       `
#include "main.h"
/**
 * _puts - prints astring to stdout
 * @str: string to be printed
 * _putchar: prints a new line
 */
void _puts(char *str)
{
	while (*str)
		_putchar(*str++);

	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     299       `
#include "main.h"
/**
 * _strcmp - compares string values
 * @s1: input value
 * @s2: input value
 * Return: s1[i] - s2[i]
 */
int _strcmp(char *s1, char *s2)
{
	int f = 0;

	while (s1[f] != '\0' && s2[f] != '\0')
	{
		if (s1[f] != s2[f])
		{
			return (s1[f] - s2[f]);
		}
		f++;
	}
	return (0);
}

3-strspn.c/     0           0     0     644     354       `
#include "main.h"
/**
 * _strspn -entryb point
 * @s: input
 * @accept: input
 * Return: 0
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int d = 0;
	int a;

	while (*s)
	{
		for (a = 0; accept[a]; a++)
		{
			if (*s == accept[a])
			{
				d++;
				break;
			}
			else if (accept[a + 1] == '\0')
				return (d);
		}
		s++;
	}
	return (d);
}
4-isalpha.c/    0           0     0     644     222       `
#include "main.h"
/**
 * _isalpha - checks for alpahbetic character
 * @c: character
 * Return: 1 if c is a letter and 0 if otherwise
 */
int _isalpha(int c)
{
	return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
}
4-strpbrk.c/    0           0     0     644     266       `
#include "main.h"
/**
 * _strpbrk - entry point
 * @s: input
 * @accept: input
 * Return: 0
 */
char *_strpbrk(char *s, char *accept)
{
	int k;

	while (*s)
	{
		for (k = 0; accept[k]; k++)
		{
			if (*s == accept[k])
				return (s);
		}
		s++;
	}
	return ('\0');
}
5-strstr.c/     0           0     0     644     348       `
#include "main.h"
/**
 * _strstr - entry point
 * @haystack: input
 * @needle: input
 * Return: 0
 */
char *_strstr(char *haystack, char *needle)
{
	for (; *haystack != '\0'; haystack++)
	{
		char *x = haystack;
		char *y = needle;

		while (*x == *y && *y != '\0')
		{
			x++;
			y++;
		}
		if (*y == '\0')
			return (haystack);
	}
	return (0);
}
6-abs.c/        0           0     0     644     192       `
#include "main.h"
/**
 * _abs - computes absolute value of an integer
 * @n: integer
 * Return: absolute value of integer
 */
int _abs(int n)
{
	if (n > 0)
	{
		return (n);
	}
	return (-n);
}
9-strcpy.c/     0           0     0     644     322       `
#include "main.h"
/**
 * _strcpy - copies the string copied by src
 * @dest: destination
 * @src: copy from
 * Return: string value
 */
char *_strcpy(char *dest, char *src)
{
	int g = 0;
	int h = 0;

	while (*(src + g) != '\0')
	{
		g++;
	}
	for (; h < g; h++)
	{
		dest[h] = src[h];
	}
	dest[g] = '\0';
	return (dest);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

